pipeline {
    agent any
    
    parameters {
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Sadece SQL oluştur, çalıştırma (dry run)'
        )
        string(
            name: 'CONTEXTS',
            defaultValue: '',
            description: 'Context filtreleme (örn: ddl,dml) - boş bırakırsan hepsini çalıştırır'
        )
        string(
            name: 'ROLLBACK_COUNT',
            defaultValue: '',
            description: 'Kaç changeset geri alınacak (örn: 2)'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Repository checkout tamamlandı"
            }
        }
        
        stage('Prepare Workspace') {
            steps {
                sh '''
                    echo "Workspace hazırlanıyor..."
                    mkdir -p drivers
                    echo "Drivers klasörü oluşturuldu"
                    ls -la drivers/
                '''
            }
        }
        
        stage('Run MySQL Migrations') {
            steps {
                sh '''
                    export COMPOSE_PROJECT_NAME=liquibase
                    
                    # MySQL container'ını başlat
                    echo "MySQL container başlatılıyor..."
                    docker compose --project-name $COMPOSE_PROJECT_NAME -f docker-compose.mysql.yml up -d mysql
                    
                    # MySQL'in hazır olmasını bekle
                    echo "MySQL hazır olması bekleniyor..."
                    timeout 60 sh -c 'until docker compose --project-name $COMPOSE_PROJECT_NAME -f docker-compose.mysql.yml exec -T mysql mysqladmin ping -h localhost -uadmin -padmin --silent; do sleep 2; done'
                    
                    # MySQL driver'ını indir
                    echo "MySQL driver indiriliyor..."
                    curl -L https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.4.0/mysql-connector-j-8.4.0.jar -o drivers/mysql-connector-j-8.4.0.jar
                    
                    # Context ayarları
                    CTX_OPT=""
                    if [ -n "${CONTEXTS}" ]; then
                        CTX_OPT=" --contexts=${CONTEXTS}"
                    fi
                    
                    # Liquibase komutlarını çalıştır
                    if [ -n "${ROLLBACK_COUNT}" ]; then
                        echo "Rollback çalıştırılıyor: ${ROLLBACK_COUNT} changeset..."
                        docker run --rm --network liquibase_default \
                            -v $(pwd)/changelog/mysql:/liquibase/changelog \
                            -v $(pwd)/drivers:/liquibase/lib \
                            liquibase/liquibase:4.25.1 \
                            --url=jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
                            --username=admin \
                            --password=admin \
                            --driver=com.mysql.cj.jdbc.Driver \
                            --classpath=/liquibase/lib \
                            --changeLogFile=changelog/changelog.sql \
                            rollbackCount ${ROLLBACK_COUNT}${CTX_OPT}
                    elif [ "${DRY_RUN}" = "true" ]; then
                        echo "Dry run - SQL oluşturuluyor..."
                        mkdir -p reports
                        docker run --rm --network liquibase_default \
                            -v $(pwd)/changelog/mysql:/liquibase/changelog \
                            -v $(pwd)/drivers:/liquibase/lib \
                            liquibase/liquibase:4.25.1 \
                            --url=jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
                            --username=admin \
                            --password=admin \
                            --driver=com.mysql.cj.jdbc.Driver \
                            --classpath=/liquibase/lib \
                            --changeLogFile=changelog/changelog.sql \
                            updateSQL${CTX_OPT} | tee reports/mysql_update.sql
                    else
                        echo "Migration'lar çalıştırılıyor..."
                        docker run --rm --network liquibase_default \
                            -v $(pwd)/changelog/mysql:/liquibase/changelog \
                            -v $(pwd)/drivers:/liquibase/lib \
                            liquibase/liquibase:4.25.1 \
                            --url=jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
                            --username=admin \
                            --password=admin \
                            --driver=com.mysql.cj.jdbc.Driver \
                            --classpath=/liquibase/lib \
                            --changeLogFile=changelog/changelog.sql \
                            update${CTX_OPT}
                    fi
                    
                    # Durum kontrolü
                    echo "Migration durumu:"
                    docker run --rm --network liquibase_default \
                        -v $(pwd)/changelog/mysql:/liquibase/changelog \
                        -v $(pwd)/drivers:/liquibase/lib \
                        liquibase/liquibase:4.25.1 \
                        --url=jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
                        --username=admin \
                        --password=admin \
                        --driver=com.mysql.cj.jdbc.Driver \
                        --classpath=/liquibase/lib \
                        --changeLogFile=changelog/changelog.sql \
                        status${CTX_OPT}
                '''
            }
        }
        
        stage('Smoke Test') {
            steps {
                sh '''
                    echo "Smoke test çalıştırılıyor..."
                    docker compose --project-name liquibase -f docker-compose.mysql.yml exec -T mysql sh -c "
                        mysql -uadmin -padmin -D testdb -e \"SHOW TABLES; SELECT COUNT(*) AS user_count FROM users; SELECT COUNT(*) AS product_count FROM products; SELECT COUNT(*) AS category_count FROM categories;\"
                    "
                '''
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "Cleanup yapılıyor..."
                export COMPOSE_PROJECT_NAME=liquibase
                docker compose --project-name $COMPOSE_PROJECT_NAME -f docker-compose.mysql.yml down
            '''
        }
        success {
            echo "MySQL migration başarıyla tamamlandı!"
        }
        failure {
            echo "MySQL migration başarısız!"
        }
    }
}
