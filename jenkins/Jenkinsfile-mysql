pipeline {
    agent any
    
    parameters {
        file(name: 'packageZip', description: 'Upload ZIP containing docker-compose.mysql.yml, changelog/, drivers/')
        string(name: 'packageUrl', defaultValue: '', description: 'Optional: HTTP(S) URL to ZIP if upload fails')
        string(name: 'contexts', defaultValue: '', description: 'Optional: Liquibase contexts (e.g. ddl, dml, prod)')
        booleanParam(name: 'runOnlyDDL', defaultValue: false, description: 'Sadece DDL (şema) çalıştır')
        booleanParam(name: 'runOnlyDML', defaultValue: false, description: 'Sadece DML (veri) çalıştır')
        booleanParam(name: 'dryRunUpdate', defaultValue: false, description: 'Gerçek update yerine SQL çıktısı üret (updateSQL)')
        string(name: 'rollbackCount', defaultValue: '', description: 'Rollback sayısı (boş ise yapma)')
    }
    
    stages {
        stage('Checkout Source') {
            steps {
                // Explicit checkout to ensure full repo is available in workspace
                git branch: 'main', url: 'https://github.com/semihaker/liquibase.git'
            }
        }
        
        stage('Prepare Workspace') {
            steps {
                sh '''
                #!/usr/bin/env bash
                set -eu
                if [ -n "${BASH:-}" ]; then set -o pipefail; fi
                set -x
                cd "$WORKSPACE"
                echo "Preparing workspace..."
                echo "Listing current files:"
                ls -la || true
                # Ensure drivers folder and MySQL driver exist
                mkdir -p drivers
                echo "Drivers folder created"
                ls -la drivers/ || echo "Drivers folder is empty"
                if [ ! -f drivers/mysql-connector-j-8.4.0.jar ]; then
                    echo "MySQL driver not found. Downloading..."
                    command -v curl >/dev/null 2>&1 || (command -v apt-get >/dev/null 2>&1 && sudo apt-get update && sudo apt-get install -y curl) || true
                    curl -L "https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.4.0/mysql-connector-j-8.4.0.jar" -o drivers/mysql-connector-j-8.4.0.jar
                    echo "MySQL driver downloaded successfully"
                    ls -la drivers/
                else
                    echo "MySQL driver already exists"
                    ls -la drivers/
                fi
                # If compose file is missing, try to find and unzip a package in workspace
                if [ ! -f docker-compose.mysql.yml ]; then
                    # Try multiple candidate locations for the uploaded file parameter
                    CANDIDATES="${packageZip:-} $WORKSPACE/${packageZip:-} $(ls -1 *.zip 2>/dev/null | head -n 1)"
                    ZIP_FILE=""
                    for f in $CANDIDATES; do
                        if [ -n "$f" ] && [ -f "$f" ]; then ZIP_FILE="$f"; break; fi
                    done
                    # Jenkins genelde dosyayı $WORKSPACE@tmp/fileParameters altına koyar – orayı da tara
                    if [ -z "${ZIP_FILE:-}" ] && [ -d "${WORKSPACE}@tmp/fileParameters" ]; then
                        ZIP_FILE=$(find "${WORKSPACE}@tmp/fileParameters" -maxdepth 1 -type f -name "*.zip" | head -n 1 || true)
                    fi
                    # Bazı kurulumlarda dosya parametresi farklı alt klasöre düşer; $WORKSPACE@tmp genel tarama
                    if [ -z "${ZIP_FILE:-}" ] && [ -d "${WORKSPACE}@tmp" ]; then
                        ZIP_FILE=$(find "${WORKSPACE}@tmp" -maxdepth 3 -type f -name "*.zip" | head -n 1 || true)
                    fi
                    # If still not found, try downloading from packageUrl
                    if [ -z "${ZIP_FILE:-}" ] && [ -n "${packageUrl:-}" ]; then
                        echo "Downloading ZIP from packageUrl: $packageUrl"
                        if ! command -v curl >/dev/null 2>&1 && command -v apt-get >/dev/null 2>&1; then sudo apt-get update && sudo apt-get install -y curl || true; fi
                        if command -v curl >/dev/null 2>&1; then
                            curl -L "$packageUrl" -o package.zip
                            ZIP_FILE="package.zip"
                        elif command -v wget >/dev/null 2>&1; then
                            wget -O package.zip "$packageUrl"
                            ZIP_FILE="package.zip"
                        else
                            echo "Neither curl nor wget available to download packageUrl" >&2
                        fi
                    fi
                    if [ -n "${ZIP_FILE:-}" ] && [ -f "$ZIP_FILE" ]; then
                        command -v unzip >/dev/null 2>&1 || (command -v apt-get >/dev/null 2>&1 && sudo apt-get update && sudo apt-get install -y unzip) || true
                        echo "Found ZIP at: $ZIP_FILE"
                        unzip -o "${ZIP_FILE}" || { echo "Failed to unzip $ZIP_FILE"; exit 1; }
                    else
                        echo "docker-compose.mysql.yml yok ve zip bulunamadı. Lütfen job'a bir zip yükleyin (packageZip) veya packageUrl ile bir adres verin, ya da SCM kullanın." >&2
                        echo "Parametre değeri: ${packageZip:-<empty>}"
                        echo "URL: ${packageUrl:-<empty>}"
                        echo "Workspace: $WORKSPACE"
                        ls -la || true
                        exit 1
                    fi
                fi
                '''
            }
        }
        
        stage('Run Migrations Script') {
            steps {
                sh '''
                #!/usr/bin/env bash
                set -eu
                if [ -n "${BASH:-}" ]; then set -o pipefail; fi
                set -x
                export COMPOSE_PROJECT_NAME=liquibase
                cd "$WORKSPACE"
                echo "Current directory: $(pwd)"
                echo "Workspace: $WORKSPACE"
                echo "Docker info:"
                command -v docker >/dev/null 2>&1 || { echo "docker not found"; exit 1; }
                if ! docker compose version >/dev/null 2>&1; then
                  echo "docker compose v2 not found (required)." >&2
                  exit 1
                fi
                docker version || true
                docker compose version || true
                echo "Files in current directory:"
                ls -la
                echo "Starting MySQL container..."
                docker compose --project-name "$COMPOSE_PROJECT_NAME" -f docker-compose.mysql.yml up -d mysql --remove-orphans
                echo "Waiting for MySQL to be ready..."
                echo "Using ping loop (180s timeout) for better reliability"
                timeout 180 sh -c 'until docker compose --project-name liquibase -f docker-compose.mysql.yml exec -T mysql mysqladmin ping -h localhost -uadmin -padmin --silent; do sleep 2; done'
                echo "MySQL is ready!"
                
                # Prepare contexts from string param
                CTX_OPT=""
                if [ -n "${contexts:-}" ]; then
                  CTX_OPT=" --contexts=${contexts}"
                  echo "Using contexts (string): ${contexts}"
                fi
                
                # Override with boolean params if provided (mutual preference: if both true -> run all)
                if [ "${runOnlyDDL:-false}" = "true" ] && [ "${runOnlyDML:-false}" != "true" ]; then
                  CTX_OPT=" --contexts=ddl"
                  echo "Using contexts (boolean): ddl"
                elif [ "${runOnlyDML:-false}" = "true" ] && [ "${runOnlyDDL:-false}" != "true" ]; then
                  CTX_OPT=" --contexts=dml"
                  echo "Using contexts (boolean): dml"
                elif [ "${runOnlyDDL:-false}" = "true" ] && [ "${runOnlyDML:-false}" = "true" ]; then
                  CTX_OPT=""
                  echo "Both runOnlyDDL and runOnlyDML are true -> run all (no contexts filter)"
                elif [ -z "${contexts:-}" ]; then
                  echo "No contexts selected -> run all"
                fi
                
                echo "Validating Liquibase changelog..."
                echo "Checking drivers folder before Docker run:"
                ls -la drivers/
                echo "Testing Docker mount with ls command:"
                docker run --rm --network liquibase_default -v /var/jenkins_home/workspace/Liquibase-MySQL@2/drivers:/liquibase/lib alpine:latest ls -la /liquibase/lib/
                echo "Downloading MySQL driver directly in container..."
                docker run --rm --network liquibase_default \
                    -v /var/jenkins_home/workspace/Liquibase-MySQL@2/changelog/mysql:/liquibase/changelog/mysql \
                    liquibase/liquibase:4.25.1 \
                    sh -c "curl -L https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.4.0/mysql-connector-j-8.4.0.jar -o /liquibase/lib/mysql-connector-j-8.4.0.jar && \
                    liquibase --url='jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC' \
                    --username=admin --password=admin \
                    --driver=com.mysql.cj.jdbc.Driver \
                    --classpath=/liquibase/lib \
                    --changeLogFile=changelog/mysql/changelog.sql \
                    validate${CTX_OPT}"
                if [ -n "${rollbackCount:-}" ]; then
                  echo "Rolling back ${rollbackCount} changesets..."
                  docker run --rm --network liquibase_default -v /var/jenkins_home/workspace/Liquibase-MySQL@2/changelog/mysql:/liquibase/changelog/mysql -v /var/jenkins_home/workspace/Liquibase-MySQL@2/drivers:/liquibase/lib liquibase/liquibase:4.25.1 --url="jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC" --username=admin --password=admin --driver=com.mysql.cj.jdbc.Driver --classpath=/liquibase/lib --changeLogFile=changelog/mysql/changelog.sql rollbackCount ${rollbackCount}${CTX_OPT}
                elif [ "${dryRunUpdate:-false}" = "true" ]; then
                  echo "Generating update SQL (dry run)..."
                  mkdir -p reports
                  docker run --rm --network liquibase_default -v /var/jenkins_home/workspace/Liquibase-MySQL@2/changelog/mysql:/liquibase/changelog/mysql -v /var/jenkins_home/workspace/Liquibase-MySQL@2/drivers:/liquibase/lib liquibase/liquibase:4.25.1 --url="jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC" --username=admin --password=admin --driver=com.mysql.cj.jdbc.Driver --classpath=/liquibase/lib --changeLogFile=changelog/mysql/changelog.sql updateSQL${CTX_OPT} | tee reports/mysql_update.sql
                else
                  echo "Applying Liquibase migrations..."
                  docker run --rm --network liquibase_default -v /var/jenkins_home/workspace/Liquibase-MySQL@2/changelog/mysql:/liquibase/changelog/mysql -v /var/jenkins_home/workspace/Liquibase-MySQL@2/drivers:/liquibase/lib liquibase/liquibase:4.25.1 --url="jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC" --username=admin --password=admin --driver=com.mysql.cj.jdbc.Driver --classpath=/liquibase/lib --changeLogFile=changelog/mysql/changelog.sql update${CTX_OPT}
                fi
                echo "Checking Liquibase status..."
                docker run --rm --network liquibase_default -v /var/jenkins_home/workspace/Liquibase-MySQL@2/changelog/mysql:/liquibase/changelog/mysql -v /var/jenkins_home/workspace/Liquibase-MySQL@2/drivers:/liquibase/lib liquibase/liquibase:4.25.1 --url="jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC" --username=admin --password=admin --driver=com.mysql.cj.jdbc.Driver --classpath=/liquibase/lib --changeLogFile=changelog/mysql/changelog.sql status${CTX_OPT}
                echo "Running Smoke Test: Verify tables and data counts..."
                docker compose --project-name liquibase -f docker-compose.mysql.yml exec -T mysql sh -lc "
                mysql -uadmin -padmin -D testdb -e \"SHOW TABLES; SELECT COUNT(*) AS user_count FROM users; SELECT COUNT(*) AS product_count FROM products; SELECT COUNT(*) AS category_count FROM categories;\"
                "
                echo "Generating reports..."
                mkdir -p reports
                docker compose --project-name liquibase -f docker-compose.mysql.yml exec -T mysql sh -lc "mysql -uadmin -padmin -D testdb -B -e \"SELECT (SELECT COUNT(*) FROM users) AS users, (SELECT COUNT(*) FROM products) AS products, (SELECT COUNT(*) FROM categories) AS categories;\" > /tmp/counts.tsv && tr '\\t' ',' < /tmp/counts.tsv > /tmp/table_counts.csv"
                CID=$(docker compose --project-name liquibase -f docker-compose.mysql.yml ps -q mysql)
                if [ -n "$CID" ]; then docker cp "$CID":/tmp/table_counts.csv "/var/jenkins_home/workspace/Liquibase-MySQL@2/reports/table_counts.csv"; else echo "MySQL container ID not found"; fi
                echo "Reports generated in reports/"
                echo "Migration and reporting completed."
                '''
            }
        }
    }
    
    post {
        always {
            sh 'docker compose --project-name liquibase -f docker-compose.mysql.yml down -v || true'
            archiveArtifacts artifacts: 'reports/**', fingerprint: true
        }
    }
}


